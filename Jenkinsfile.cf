pipeline { 
    agent any
    environment {
        DOCKER_PASS = credentials('docker_pass')
        SONAR_TOKEN = credentials('sonar_token')
        TARGET_HOST = '192.168.56.71'
        // TAG_VERSION = '1.0'
        // TAG_VERSION = sh (script: "git rev-parse --short HEAD", returnStdout: true)
        GIT_COMMIT_HASH = sh (script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }
    stages { 
        stage('Test') { 
            agent { 
                docker { 
                    image 'charlesfc001/node18-alpine3.16-cb' 
                } 
            } 
            steps { 
                sh 'npm install' 
                sh 'npm run test' 
            } 
            post {
                always {
                    archiveArtifacts artifacts: 'tests/report/report.html', followSymlinks: false
                }
            }
        }
        stage('Code Inspection') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh '/var/jenkins_home/.sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner \
                        -Dsonar.organization=at20-cj \
                        -Dsonar.projectKey=at20-cj \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=https://sonarcloud.io'
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Package') {
            steps {
                sh 'docker build -t compiler .'
            }
        }
        stage('Publish') {
            steps {
                // sh 'export TAG=$(git log --pretty=format:'%h' -n 1)'
                sh 'docker login -u charlesfc001 -p ${DOCKER_PASS}'
                sh 'docker tag compiler charlesfc001/compiler:${GIT_COMMIT_HASH}'
                sh 'docker push charlesfc001/compiler:${GIT_COMMIT_HASH}'
            }
        }
        stage('DeployToDev') {
            steps {
                // SH 'echo TAG_VERSION=${GIT_COMMIT_HASH} > .env.version'                
                sh 'echo ${TAG_VERSION}'
                // sh 'export TAG_VERSION=${GIT_COMMIT_HASH}'
                // sh 'docker-compose -f docker-compose.cj.yaml up -d'
                sh 'export TAG_VERSION=${GIT_COMMIT_HASH} && docker-compose -f docker-compose.cj.yaml up -d'
            }
        }
        stage('DeployToAUTO') {
            steps {
                sh 'DOCKER_HOST=ssh://$TARGET_HOST docker-compose -f docker-compose.cj.yaml up -d'
            }
        }
    } 
    post {
        always {
            sh 'docker rmi $(docker images -f "dangling=true" -q)'
        }
    }
} 