pipeline {
    agent any
    environment {
        DOCKER_PASS = credentials('docker_pass_mh')
        SONAR_TOKEN = credentials('sonar_token')
    }
    stages {
        stage('Test') {
            agent {docker 'marseonji/node-18-alpine3.16-cb'}
            steps {
                sh 'npm install'
                sh 'npm test'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'tests/report/report.html', followSymlinks: false
                }
            }
        }
        stage('CodeInspection') {
            steps {
                withSonarQubeEnv('sonar_scanner'){
                    sh '/var/jenkins_home/.sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner \
                            -Dsonar.organization=at20-mh \
                            -Dsonar.projectKey=at20-mh \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io'
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time:1, unit: 'HOURS') {
                    script {
                        def qg = waitForQualityGate()
                        if(qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Package') {
            steps {
                sh 'docker build -t at20_compiler_services .'
            }
        }
        stage('Publish') {
            steps {
                sh 'docker login -u marseonji -p ${DOCKER_PASS}'
                sh 'docker tag at20_compiler_services marseonji/at20_compiler_service'
                sh 'docker push marseonji/at20_compiler_service'
            }
        }
        stage('DeployToDev') {
            steps {
                sh 'docker compose -f docker-compose.mh.yaml up -d'
            }
        }
    }
    post {
        always {
            sh 'docker rmi $(docker images -f "dangling=true" -q)'
            sh 'docker system prune -a'
        }
    }
}